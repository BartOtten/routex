name: Elixir CI

on:
  push:
    branches:
      - main
      - ci-test
  pull_request:
    branches:
      - main
      - ci-test

env:
  MIX_ENV: test
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for Coveralls

permissions:
  contents: write # Needed for gh-pages deployment

jobs:
  build:
    runs-on: ubuntu-latest
    # The matrix strategy below enables parallel execution for each combination
    strategy:
      matrix:
        # Include the latest stable Elixir version
        elixir: ['1.18.1', '1.18.3', 'latest']
        # Include the latest stable Erlang/OTP version
        otp:  ['25.3.1', '26.2.0', '27.3.0', '27.3.3'] # Do not forget to update deploy stage

    name: Build and test (OTP ${{ matrix.otp }} / Elixir ${{ matrix.elixir }})
    steps:

    - name: Set up Elixir
      # Corrected action name from erf to erlef
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }}  # Define the OTP version [required]
        version-type: strict # Use strict version matching as recommended

    - name: Checkout code
      uses: actions/checkout@v4

    # Consolidated caching step for both deps and _build
    # This key ensures a unique cache for each OS, OTP, and Elixir version based on mix.lock
    - name: Cache dependencies and build artifacts
      uses: actions/cache@v3
      id: mix-build-cache # Give the cache step an ID
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}- # Fallback to cache for the same OS, OTP, and Elixir version
          ${{ runner.os }}-${{ matrix.otp }}- # Fallback to cache for the same OS and OTP version
          ${{ runner.os }}- # Fallback to cache for the same OS

    - name: Install Mix Dependencies
      # Only run deps.get if the cache was not hit
      if: steps.mix-build-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force --if-missing
        mix local.hex --force
        mix deps.get

    # The rest of the steps remain largely the same, leveraging the cached dependencies and build
    - name: Compiles without warnings
      run: mix compile --warnings-as-errors

    # Only run formatting check for the latest OTP and Elixir combination
    - name: Check Formatting
      if: matrix.otp == '27.3.3' && matrix.elixir == 'latest'
      run: mix format --check-formatted

    - name: Run Credo
      run: mix credo --strict

    - name: Run Dialyzer
      run: mix dialyzer

    - name: Run tests
      run: mix test

    - name: Run coverage tool
      # Use the matrix variables in the flagname for coveralls
      # This step reports coverage for this specific parallel job
      run: mix coveralls.github --parallel --flagname otp-${{ matrix.otp }}-elixir-${{ matrix.elixir }}

    - name: Generate docs
      run: |
        mix docs

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: doc-${{ matrix.otp }}-${{ matrix.elixir }}
        path: doc
        # Optional: Add a retention period for the artifact
        # retention-days: 5

  coveralls_finalize:
    runs-on: ubuntu-latest
    # This job depends on the 'build' job completing successfully
    needs: build
    name: Finalize Coveralls Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use the dedicated Coveralls GitHub Action to finalize the parallel build
      - name: Finalize Coveralls
        uses: coverallsapp/github-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  deploy:
    runs-on: ubuntu-latest
    # This job depends on the 'build' job completing successfully
    # It does NOT need to depend on coveralls_finalize
    needs: build
    name: Deploy Docs
    # Define the specific OTP and Elixir versions for the docs to deploy
    env:
      # Updated to the latest versions
      DEPLOY_OTP: '27.3.3'
      DEPLOY_ELIXIR: 'latest'
    steps:
      # Download the specific artifact needed for deployment using the defined versions
      - uses: actions/download-artifact@v4
        with:
          name: doc-${{ env.DEPLOY_OTP }}-${{ env.DEPLOY_ELIXIR }}
          path: doc
      # The rest of the deployment steps are unchanged
      - name: Force push to gh-pages
        run: |
          # Setup
          cd doc
          git init --initial-branch gh-pages
          git remote add origin git@github.com:BartOtten/routex.git
          git config user.name "Bart Otten"
          git config user.email "bart.otten85@gmail.com"
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.GH_PAGES_SSH }}'
          # Push
          git add .
          git commit -m "mix docs"
          git push --set-upstream origin gh-pages -f
